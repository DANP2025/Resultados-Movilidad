# app.py
import os
import streamlit as st
import pandas as pd
import subprocess
import sys

# -----------------------
# CONFIGURACI√ìN INICIAL
# -----------------------
st.set_page_config(page_title="Tabla Interactiva (solo emojis)", layout="wide")
st.title("üìä Tabla interactiva ‚Äî solo emojis")
st.markdown(
    "La app lee el archivo local **'PRUEBAS MOVILIDAD.xlsx'** (debe estar en la misma carpeta que `app.py`). "
    "No hay opci√≥n para subir archivos en la interfaz (ideal para link p√∫blico)."
)

# -----------------------
# Ruta del archivo local
# -----------------------
EXCEL_FILENAME = "PRUEBAS MOVILIDAD.xlsx"

# -----------------------
# FUNCIONES
# -----------------------
def asegurar_openpyxl():
    """Verifica si openpyxl est√° instalado; si no, lo instala autom√°ticamente."""
    try:
        import openpyxl  # noqa: F401
    except ImportError:
        st.warning("No encontr√© 'openpyxl', instalando autom√°ticamente...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "openpyxl"])
        st.success("openpyxl instalado correctamente. Recarga la p√°gina.")
        st.stop()

def cargar_excel(path):
    """Lee el Excel y devuelve un DataFrame o None si hay error."""
    asegurar_openpyxl()
    try:
        df = pd.read_excel(path, engine="openpyxl")
        return df
    except Exception as e:
        st.error(f"No pude leer '{path}': {e}")
        return None

def solo_emojis(df):
    """
    Reemplaza los valores num√©ricos por emojis seg√∫n umbrales.
    Devuelve un DataFrame con SOLO las columnas deseadas (sin valores num√©ricos),
    pero manteniendo columnas de identificaci√≥n como JUGADOR, ID, NOMBRE, etc.
    """
    df_e = df.copy()
    reglas = {
        "THOMAS PSOAS (D)": 10,
        "THOMAS PSOAS (I)": 10,
        "THOMAS CUADRICEPS (D)": 50,
        "THOMAS CUADRICEPS (I)": 50,
        "THOMAS SARTORIO (D)": 80,
        "THOMAS SARTORIO (I)": 80,
        "JURDAN (D)": 75,
        "JURDAN (I)": 75
    }

    for c in reglas.keys():
        if c in df_e.columns:
            df_e[c] = pd.to_numeric(df_e[c], errors="coerce")

    for col, umbral in reglas.items():
        if col in df_e.columns:
            df_e[col] = df_e[col].apply(
                lambda v: "üü¢üëç" if pd.notna(v) and v > umbral else ("üî¥üëé" if pd.notna(v) else "")
            )

    mostrar = []

    id_columns = ["JUGADOR", "ID", "NOMBRE", "APELLIDO", "NOMBRE_COMPLETO", "NOMBRE Y APELLIDO", "NOMBRE_APELLIDO"]
    for col in id_columns:
        if col in df_e.columns and col not in mostrar:
            mostrar.append(col)

    if "CATEGOR√çA" in df_e.columns and "CATEGOR√çA" not in mostrar:
        mostrar.insert(0, "CATEGOR√çA")

    for col in reglas.keys():
        if col in df_e.columns:
            mostrar.append(col)

    if not mostrar:
        mostrar = df_e.columns.tolist()

    if "CATEGOR√çA" not in df_e.columns:
        st.warning("No encontr√© la columna 'CATEGOR√çA'. Se mostrar√°n todos los registros (sin filtro).")
        cols_existentes = [c for c in mostrar if c in df_e.columns]
        return df_e.loc[:, cols_existentes] if cols_existentes else df_e

    cols_existentes = [c for c in mostrar if c in df_e.columns]
    return df_e.loc[:, cols_existentes]

def altura_segura(num_filas, min_h=120, max_h=1200, row_px=30, header_px=40):
    h = header_px + num_filas * row_px
    if h < min_h:
        return min_h
    if h > max_h:
        return max_h
    return h

# -----------------------
# L√ìGICA PRINCIPAL
# -----------------------

if not os.path.exists(EXCEL_FILENAME):
    st.error(f"No encontr√© el archivo local '{EXCEL_FILENAME}'. Col√≥calo en la misma carpeta que app.py y vuelve a ejecutar.")
    st.stop()

df_raw = cargar_excel(EXCEL_FILENAME)
if df_raw is None:
    st.stop()

df_emojis = solo_emojis(df_raw)

if "CATEGOR√çA" in df_emojis.columns:
    categorias_raw = df_emojis["CATEGOR√çA"].dropna().astype(str)
    categorias_unicas = sorted(categorias_raw.unique().tolist())
    categorias = ["Todas"] + categorias_unicas
    seleccion = st.selectbox("üîé Filtrar por CATEGOR√çA", categorias)
    if seleccion != "Todas":
        df_mostrar = df_emojis[df_emojis["CATEGOR√çA"].astype(str) == seleccion].copy()
    else:
        df_mostrar = df_emojis.copy()
else:
    df_mostrar = df_emojis.copy()

num_filas = len(df_mostrar)
height_px = altura_segura(num_filas)
st.markdown(f"**Registros mostrados:** {num_filas}")
st.dataframe(df_mostrar.reset_index(drop=True), use_container_width=True, height=height_px)

if st.button("üîÑ Refrescar datos (releer archivo local)"):
    st.experimental_rerun()

st.info("Para que el link p√∫blico funcione sin uploader, sube 'PRUEBAS MOVILIDAD.xlsx' al repositorio junto con app.py y requirements.txt.")

